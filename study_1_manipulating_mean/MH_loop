
//function
var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var bootstrappedPriors = json.read('generics-bda-L0-btstrp-priors-notPretty.json') //read the file
var interpretationCounts = json.read('generics-bda-L0-interpretations-counts.json')
var iterations = levels(bootstrappedPriors, "i")
var priorsNames = levels(bootstrappedPriors, "distribution")

var sampleFromPriorProbs = [0.0001, 0.0005, 0.001]

foreach(sampleFromPriorProbs, function(sampleFromPrior){

  var resultsHandle = utils.openFile("results/bootstrap/generics-bda-L0-btstrpPriors-likelihood-results_sampleFromPriorProb"+sampleFromPrior+".csv")
  utils.writeLine(resultsHandle, ["model", "distribution", "iteration", "likelihood"])

  foreach(iterations, function(i){

    var iterationPriors = _.filter(bootstrappedPriors, {i: i})

    foreach(priorsNames, function(distribution){
      var distributionPriorsObj = _.filter(iterationPriors, {distribution: distribution} )[0]
      var distributionPriors = _.omit(distributionPriorsObj, ["distribution", "i"])


      var distributionIntObj = _.filter(interpretationCounts, {distribution: distribution} )[0]
      var distributionInt= _.omit(distributionIntObj, ["distribution"])

      var vs = sort(map(function(x){utils.wpParseFloat(x)}, _.keys(distributionPriors)))
      var ps = map(function(v){distributionPriors[v]}, vs)
      var data_counts = map(function(v){distributionInt[v]}, vs)

      var statePrior = Infer({model: function(){ categorical({vs, ps}) } })

      var listener = function(threshold) {
        Infer({model: function(){
        var state = sample(statePrior)
        var theta = threshold ? threshold : sample(thetaPrior)
        condition( flip(sampleFromPrior) ? true : state > theta)
        return state
      }})}

      var all_thresholds = [false, _.min(thetaBins), 0.125, 0.375, 0.625, 0.875]
      // console.log(data_counts)
      var priorLikelihood = Multinomial({
          ps: normalize(ps),
          n: sum(data_counts)
      }).score(data_counts)

      utils.writeLine(resultsHandle, ["prior", distribution, i, priorLikelihood])

      foreach(all_thresholds, function(t){

        var posterior = listener(t)

        var posteriorProbs = map(function(v){ Math.exp(posterior.score(v)) }, vs)

        var modelLikelihood = Multinomial({
          ps: posteriorProbs,
          n: sum(data_counts)
        }).score(data_counts)

        var modelName = t ? "fixed_" + t : "uncertain"

        utils.writeLine(resultsHandle, [modelName, distribution, i, modelLikelihood])

      })
    })
  })

  utils.closeFile(resultsHandle)
  console.log(sampleFromPrior + " complete")

})
